<!-- user.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="apple-touch-icon" sizes="180x180" href="../assets/photos/brand/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="../assets/photos/brand/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="../assets/photos/brand/favicon-16x16.png">
    <link rel="stylesheet" href="../assets/css/style.css">
    <link rel="stylesheet" href="../assets/css/user.css">
    <link rel="stylesheet" href="../assets/css/home.css">
    <link rel="stylesheet" href="../assets/css/discussion.css">
    <title>@<%= user.username %> | Dizcuss</title>
</head>

<body>
    <% 
            function formatTimestamp(createdAt) {
                const now = new Date();
                const diffInMilliseconds = now - createdAt;
              
                if (diffInMilliseconds < 60000) {
                  return `${Math.floor(diffInMilliseconds / 1000)} seconds ago`;
                } else if (diffInMilliseconds < 3600000) {
                  return `${Math.floor(diffInMilliseconds / 60000)} minutes ago`;
                } else if (diffInMilliseconds < 86400000) {
                  return `${Math.floor(diffInMilliseconds / 3600000)} hours ago`;
                } else {
                  return `${Math.floor(diffInMilliseconds / 86400000)} days ago`;
                }
              }
  %>        
    <%- include('sidebar', { currentPage: 'Profile' }) %>
    <section class="home-container">
        <div class="user-info-section">
            <p class="username-title">
                <%= user.username %>
            </p>
            <!-- HTML button element -->
            
            <% if (user._id !== user.userId) { %>
                <button id="followButton" data-user-id="<%= user._id %>" class="follow-button">Follow</button> 
            <% } %>
        </div>
        <p class="following-chip">Following: <%= user.following.length  %></p>

        <div class="tab">
            <button class="tablinks" onclick="openTab(event, 'User-Discussion')">Discussions</button>
            <button class="tablinks" onclick="openTab(event, 'User-Replies')">Replies</button>
        </div>

        <div id="User-Discussion" class="tabcontent">
            <ul>
                <% discussions.forEach(discussion=> { %>
                    <%
                    const createdAt = new Date(discussion.createdAt);
            const formattedTimestamp = formatTimestamp(createdAt); 
            // Get the count of replies for this discussion
            const replyCount = discussion.replies.length;
            %>
                    <div class="discussion-card">
                        <a href="/member/<%= user.username %>" class="user-detail-name">
                            <p class="user-full-name"><%= user.fullName %></p>
                        <p class="user-name">
                            @<%= user.username %>
                        </p>
                    </a>
                        <a href="/discussion/<%= discussion._id %>">
                        <p class="discussion-title" data-id="<%= discussion._id %>">
                            <%= discussion.content %>
                        </p>
                    </a>
                        <p class="discussion-time"><%= formattedTimestamp %></p>
                        <div class="discussion-toolbar">
                        <a class="reply-button discussion-btn" href="/discussion/<%= discussion._id %>"><%= replyCount %> Replies</a>
                        </div>
                        </div>
                        <% }); %>
            </ul>
        </div>

        <div id="User-Replies" class="tabcontent">
                            </a><% userReplies.forEach(reply => { %>
                                <% const createdAt=new Date(reply.createdAt); const
                                formattedTimestampReply=formatTimestamp(createdAt); %>
                                <li class="reply-component">
                                    <a href="/member/<%= user.username %>">
                                        <p class="reply-username">
                                            @<%= user.username %>
                                        </p>
                                    </a>
                                    <p class="reply-time">
                                        <%= formattedTimestampReply %>
                                    </p>
                                    <a href="/discussion/">
                                        <p class="reply-content">
                                            <%= reply.content %>
                                        </p>
                                    </a>
                                            <!-- You can display more details about each reply as needed -->
                                </li>
                            <% }); %>
                                    <!-- You can display more details about each reply as needed -->
        </div>
    </section>
    <!-- Display other user profile information and discussions as needed -->
    <script src="../assets/js/script.js"></script>
    <script>
        // Get the button element and user ID
        const followButton = document.getElementById('followButton');
        const userId = followButton.getAttribute('data-user-id');

        // Function to update the button text and toggle Follow/Unfollow
        async function toggleFollowUnfollow() {
            try {
                const response = await fetch(`/toggleFollow/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    // Include credentials if needed (e.g., for cookies)
                    credentials: 'include',
                });

                if (response.ok) {
                    // Toggle Follow/Unfollow
                    const data = await response.json();
                    followButton.textContent = data.isFollowing ? 'Following' : 'Follow';
                } else {
                    console.error('Toggle Follow/Unfollow request failed');
                }
            } catch (error) {
                console.error('Error toggling Follow/Unfollow:', error);
            }
        }

        // Add a click event listener to the button
        followButton.addEventListener('click', toggleFollowUnfollow);

        // Fetch the initial follow status and update the button text when the page loads
        async function fetchInitialFollowStatus() {
            try {
                const response = await fetch(`/follow/status/${userId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    // Include credentials if needed (e.g., for cookies)
                    credentials: 'include',
                });

                if (response.ok) {
                    const data = await response.json();
                    followButton.textContent = data.isFollowing ? 'Following' : 'Follow';
                } else {
                    console.error('Failed to fetch follow status');
                }
            } catch (error) {
                console.error('Error fetching follow status:', error);
            }
        }

        // Call the function to fetch the initial follow status when the page loads
        fetchInitialFollowStatus();
    </script>
        </body>


</html>